services:
  db:
    image: postgres:16-alpine
    container_name: journalapp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: journalapp
      POSTGRES_USER: journal
      POSTGRES_PASSWORD: journalpass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U journal -d journalapp"]
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: journalapp-backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      JWT_SECRET: dev-secret-change-me-please-xxxxxxxxxxxxxxxxxxxxxxxx
      APPLE_SHARED_SECRET: dummy
      GOOGLE_SA_EMAIL: dummy@example.com
      GOOGLE_SA_KEY: dummy
      DB_FILE: /data/journal.sqlite
      DATABASE_URL: postgres://journal:journalpass@db:5432/journalapp
      REDIS_URL: redis://redis:6379
      ALLOW_SQLITE_PROD: '0'
      CSP_REPORT_ONLY: '1'
    ports:
      - "3000:3000"
    volumes:
      - backend_data:/data
    # healthcheck could target /health or /healthz
    healthcheck:
      test: ["CMD-SHELL", "node -e \"fetch('http://localhost:3000/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))\""]
      interval: 15s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    container_name: journalapp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server","--save","","--appendonly","no"]
volumes:
  pgdata:
  backend_data:
