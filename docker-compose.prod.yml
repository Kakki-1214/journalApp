services:
  # NOTE:
  # - 通常はこのファイル単体で backend をビルドします。
  # - GHCR 等の公開イメージを使う場合は `-f docker-compose.prod.yml -f docker-compose.image.yml` のように
  #   override を併用してください（backend の build を上書きし、image を採用）。
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: journalapp
      POSTGRES_USER: journal
      POSTGRES_PASSWORD: change-me
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U journal -d journalapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server","--save","","--appendonly","no"]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      NODE_ENV: production
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET}
      APPLE_SHARED_SECRET: ${APPLE_SHARED_SECRET}
      GOOGLE_SA_EMAIL: ${GOOGLE_SA_EMAIL}
      GOOGLE_SA_KEY_B64: ${GOOGLE_SA_KEY_B64}
      DATABASE_URL: postgres://journal:change-me@db:5432/journalapp
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
      CSP_REPORT_ONLY: "0"
      METRICS_TOKEN: ${METRICS_TOKEN}
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"fetch('http://localhost:3000/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))\""]
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
